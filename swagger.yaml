openapi: 3.0.0
servers:
  - url: https://api.pill.city/api
    description: Production
  - url: http://localhost:5000/api
    description: Development
info:
  description: API for an one-of-a-kind social network
  version: 0.0.1
  title: Pill.City
  contact:
    email: feedback@pill.city
paths:
  /signIn:
    post:
      summary: Sign in
      operationId: signIn
      security: []
      tags: ["core"]
      requestBody:
        $ref: '#/components/requestBodies/SignInRequest'
      responses:
        '200':
          $ref: '#/components/responses/SignInSuccessfulResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /availablePlugins:
    get:
      summary: Get all available plugins
      operationId: getAvailablePlugins
      security: []
      tags: [ "core" ]
      responses:
        '200':
          description: Successfully got all available plugins
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["cloudemoticon"]
  /home:
    get:
      summary: Get or poll latest home posts
      operationId: getHome
      tags: [ "core" ]
      parameters:
        - in: query
          name: to_id
          schema:
            type: string
          description: To which post ID should the server poll latest posts on home. If both to_id and from_id are present, to_id will take precedence.
        - in: query
          name: from_id
          schema:
            type: string
          description: From which post ID should the server fetch posts on home. If empty, the server will fetch the latest posts.
      responses:
        '200':
          description: Successfully got or polled home posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /me:
    get:
      summary: Get the logged in user
      operationId: getMe
      tags: [ "core" ]
      responses:
        '200':
          description: Successfully got the loggined in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /plugins:
    get:
      summary: Get plugins enabled by the user
      operationId: getPlugins
      tags: [ "core" ]
      responses:
        '200':
          description: Successfully got list enabled plugins
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["cloudemoticon"]
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /plugin/cloudemoticon/emoticons:
    get:
      summary: Get emoticons
      operationId: getEmoticons
      security: [ ]
      tags: ["plugins"]
      responses:
        '200':
          description: Successfully got emoticons
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudEmoticonRepo'
components:
  schemas:
    User:
      required:
        - id
        - created_at_seconds
      properties:
        id:
          type: string
          description: The permanent short ID for the user
          example: kt
        created_at_seconds:
          type: number
          description: In epoch seconds, when the user signed up
          example: 1631528113
        avatar_url:
          type: string
          description: URL to the user's avatar
          format: url
          example: https://pill-city.s3.us-west-2.amazonaws.com/avatars/kt-1646414449.png
          default: null
        avatar_url_v2:
          $ref: '#/components/schemas/MediaUrlV2'
        profile_pic:
          type: string
          description: User's choice of profile banner. The choices are defined on web frontend.
          example: pill1.png
          default: pill1.png
        display_name:
          type: string
          description: User's displayed/regular name. Can be changed.
          example: KT ‰∏ÄËôüÊ©ü
          default: null
      type: object
    ResharedPost:
      required:
        - id
        - created_at_seconds
        - author
      properties:
        id:
          type: string
          description: Permanent ID for the reshared post
          example: a3137edb-e629-49ac-b1f1-3343fd97329c
        created_at_seconds:
          type: number
          description: In epoch seconds, when the reshared post was created
        author:
          $ref: '#/components/schemas/User'
        content:
          type: string
          description: Text content for the reshared post
          example: Hello, World!
          default: ''
        media_urls:
          type: array
          description: URLs for the reshared post's media
          items:
            type: string
          example: ["https://pill-city.s3.us-west-2.amazonaws.com/avatars/kt-1646414449.png", "https://pill-city.s3.us-west-2.amazonaws.com/avatars/ika-1631578.png"]
          default: []
        media_urls_v2:
          type: array
          description: v2 media URLs for the comment's media
          items:
            $ref: '#/components/schemas/MediaUrlV2'
          default: []
        deleted:
          type: boolean
          description: Whether the reshared post is deleted
          default: false
    NestedComment:
      required:
        - id
        - created_at_seconds
        - author
      properties:
        id:
          type: string
          description: Permanent ID for the nested comment
          example: a3137edb-e629-49ac-b1f1-3343fd97329c
        created_at_seconds:
          type: number
          description: In epoch seconds, when the nested comment was created
        author:
          $ref: '#/components/schemas/User'
        content:
          type: string
          description: Text content for the nested comment
          example: Hello, World!
          default: ''
        media_urls:
          type: array
          description: URLs for the nested comment's media
          items:
            type: string
          example: ["https://pill-city.s3.us-west-2.amazonaws.com/avatars/kt-1646414449.png", "https://pill-city.s3.us-west-2.amazonaws.com/avatars/ika-1631578.png"]
          default: []
        media_urls_v2:
          type: array
          description: v2 media URLs for the comment's media
          items:
            $ref: '#/components/schemas/MediaUrlV2'
          default: []
        deleted:
          type: boolean
          description: Whether the nested comment is deleted
          default: false
    Comment:
      required:
        - id
        - created_at_seconds
        - author
      properties:
        id:
          type: string
          description: Permanent ID for the comment
          example: a3137edb-e629-49ac-b1f1-3343fd97329c
        created_at_seconds:
          type: number
          description: In epoch seconds, when the comment was created
        author:
          $ref: '#/components/schemas/User'
        content:
          type: string
          description: Text content for the comment
          example: Hello, World!
          default: ''
        media_urls:
          type: array
          description: URLs for the comment's media
          items:
            type: string
          example: ["https://pill-city.s3.us-west-2.amazonaws.com/avatars/kt-1646414449.png", "https://pill-city.s3.us-west-2.amazonaws.com/avatars/ika-1631578.png"]
          default: []
        media_urls_v2:
          type: array
          description: v2 media URLs for the comment's media
          items:
            $ref: '#/components/schemas/MediaUrlV2'
          default: []
        deleted:
          type: boolean
          description: Whether the comment is deleted
          default: false
        comments:
          type: array
          description: Nested comments for the comment
          items:
            $ref: '#/components/schemas/NestedComment'
    Circle:
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Permanent ID for the circle
          example: a3137edb-e629-49ac-b1f1-3343fd97329c
        name:
          type: string
          description: Circle name
          example: ÂúàÂ≠ê
    AnonymizedCircle:
      required:
        - id
      properties:
        id:
          type: string
          description: Permanent ID for the circle
          example: a3137edb-e629-49ac-b1f1-3343fd97329c
        name:
          type: string
          description: Circle name. Only contains valid data if the embedding post's author is the circle owner
          example: ÂúàÂ≠ê
    Reaction:
      required:
        - id
        - emoji
        - author
      properties:
        id:
          type: string
          description: Permanent ID for the reaction
          example: a3137edb-e629-49ac-b1f1-3343fd97329c
        emoji:
          type: string
          description: Emoji for the reaction
          example: üí©
        author:
          $ref: '#/components/schemas/User'
    PollChoice:
      required:
        - id
        - content
        - media
      properties:
        id:
          type: string
          description: Permanent ID for the poll choice
          example: a3137edb-e629-49ac-b1f1-3343fd97329c
        content:
          type: string
          description: Text content for the poll choice
          example: Choice 1
        media:
          type: string
          format: url
          description: URL for the poll choice's media
          example: https://pill-city.s3.us-west-2.amazonaws.com/avatars/kt-1646414449.png
        media_url_v2:
          $ref: '#/components/schemas/MediaUrlV2'
        voters:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: User who have voted for this poll choice
    Poll:
      properties:
        choices:
          type: array
          items:
            $ref: '#/components/schemas/PollChoice'
          description: Choices for this poll
        close_by_seconds:
          type: number
          description: In epoch seconds, by when this poll will close. Default 0 meaning the poll will never close.
          default: 0
    Post:
      required:
        - id
        - created_at_seconds
        - author
        - is_public
      properties:
        id:
          type: string
          description: Permanent ID for the post
          example: a3137edb-e629-49ac-b1f1-3343fd97329c
        created_at_seconds:
          type: number
          description: In epoch seconds, when the post was created
        author:
          $ref: '#/components/schemas/User'
        content:
          type: string
          description: Text content for the post
          example: Hello, World!
          default: ''
        is_public:
          type: boolean
          description: Whether the post is publicly accessible on the server
          example: true
        reshareable:
          type: boolean
          description: Whether the post is publicly reshareable on the server
          example: true
          default: false
        reshared_from:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ResharedPost'
        media_urls:
          type: array
          description: URLs for the post's media
          items:
            type: string
          example: ["https://pill-city.s3.us-west-2.amazonaws.com/avatars/kt-1646414449.png", "https://pill-city.s3.us-west-2.amazonaws.com/avatars/ika-1631578.png"]
          default: []
        media_urls_v2:
          type: array
          description: v2 media URLs for the comment's media
          items:
            $ref: '#/components/schemas/MediaUrlV2'
          default: []
        reactions:
          type: array
          description: Reactions for the post
          items:
            $ref: '#/components/schemas/Reaction'
        comments:
          type: array
          description: Comments for the post
          items:
            $ref: '#/components/schemas/Comment'
        circles:
          type: array
          description: Circles that the post is published in
          items:
            $ref: '#/components/schemas/AnonymizedCircle'
        deleted:
          type: boolean
          description: Whether the post is deleted
          default: false
        is_update_avatar:
          type: boolean
          description: Whether the post is an update avatar post
          default: false
        poll:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Poll'
        link_previews:
          type: array
          description: Link previews extracted from the text content
          items:
            $ref: '#/components/schemas/LinkPreview'
          default: [ ]
    Message:
      required:
        - msg
      properties:
        msg:
          type: string
          description: This is a message
          example: Human readable message
    MediaUrlV2:
      required:
        - original_url
        - processed
      properties:
        original_url:
          type: string
          description: Original URL to the media
        processed:
          type: boolean
          description: Whether the media has been processed/optimized
        width:
          type: number
          description: Processed media width
          example: 1920
        height:
          type: number
          description: Processed media height
          example: 1080
        dominant_color_hex:
          type: string
          description: Processed media dominant color in hex
          example: 8F4092
    LinkPreview:
      required:
        - url
        - state
        - index_start
        - index_end
      properties:
        url:
          type: string
          description: The previewed URL
        title:
          type: string
          description: Title for the URL
        subtitle:
          type: string
          description: Subtitle for the URL
        image_urls:
          type: array
          items:
            type: string
          description: Image URLs for the URL
        state:
          type: string
          enum: ["fetching", "fetched", "errored"]
          description: The fetching state of this URL preview
        errored_next_refetch_seconds:
          type: number
          description: If the URL preview fails to fetch, the epoch time in seconds when this URL will be refetched
        index_start:
          type: number
          description: The starting index of the URL in content
        index_end:
          type: number
          description: The ending index of the URL in content, exclusive
    CloudEmoticonEntry:
      required:
        - description
        - emoticon
      properties:
        emoticon:
          type: string
          description: The emoticon
          example: („Éª8„Éª)
        description:
          type: string
          description: Description for the emoticon
          example: „Åì„Å®„Çä
    CloudEmoticonCategory:
      required:
        - name
        - entries
      properties:
        name:
          type: string
          description: The category name
          example: G+ÈÉΩ‰∫°‰∫Ü
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CloudEmoticonEntry'
          description: Emoticon entries for the category
    CloudEmoticonRepo:
      required:
        - categories
        - information
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CloudEmoticonCategory'
          description: Emoticon categories for the repo
        information:
          type: array
          items:
            type: string
          description: Description for the repo
          example: [ "KTachibana", "https://ktachibana.party/cloudemoticon/default.json" ]
  requestBodies:
    SignInRequest:
      content:
        application/json:
          schema:
            required:
              - id
              - password
            properties:
              id:
                $ref: '#/components/schemas/User/properties/id'
              password:
                type: string
                description: User's password
                example: thisissupersecure
  responses:
    SignInSuccessfulResponse:
      description: Successfully signed in
      content:
        application/json:
          schema:
            required:
              - access_token
              - expires
            properties:
              access_token:
                type: string
                description: User's bearer token
                example: xyz.123
              expires:
                type: number
                description: In epoch seconds, when the bearer token will expire
                example: 1652301806
    400BadRequest:
      description: Bad request, invalid request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
    401Unauthorized:
      description: Unauthorized, invalid access token or wrong user ID/password
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security:
  - bearer: []
